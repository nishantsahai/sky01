import datetime
import time


class RentedCars:
    '''This class generate information of all rented cars'''
    
    global car_list 
    car_list  = {1: ["Wagon R", 10, 150], 2: ["Maruti Swift", 8, 200], 3: ["Tata Nixon", 6, 200], 4 : ["Toyota Innova", 7, 250], 5: ["Toyota Fortuner", 3, 350]}
    
    def __init__(self):
        pass
    
    def available_cars(self):         
        sum = 0    
        for values in car_list.values():
            car_name, available_quantity, hour_price = values
            sum = sum + available_quantity
        print("{:<5} {:<15} {:<15} {:<25}".format("S.No", "Car_Name", "Car_Quantity", "Price_in_Rupees_per_hour"))
        for key, value in car_list.items():
            car_name, available_quantity, hour_price = value
            print("{:<5} {:<15} {:^15} {:^25}".format(key, car_name, available_quantity, hour_price))  
        print(f"\nTotal number of cars available currently:", sum)
    
    def check_car_in_inventory(self, car_name):
        car_found = 0 
        for car in car_list.values():
            if car[0] == car_name:
                car_found = 1
                return car_found
        if car_found == 0:
            return car_found
    
    def update_car_inventory(self, customer, car_requested, car_quantity, booking_starting_timestamp, booking_ending_timestamp): 
        inventory_update = 0
        car_found_flag = 0
        for car in car_list.values():
            if car[0] == car_requested:
                car_found_flag = 1
                if car[1] >= car_quantity and car[1] != 0: 
                    rented_time = booking_starting_timestamp
                    rented_end_time = booking_ending_timestamp
                    car[1] = car[1] - car_quantity
                    customer_booking_list = [customer, car_requested, car_quantity, rented_time, rented_end_time]
                    print(customer_booking_list)
                    inventory_update = 1
                else:
                    print("Sorry. Requested quantity cannot be rented")
        if car_found_flag == 0:
            print("Requested car not available")
        if inventory_update == 1:
            print("Updated car inventory: --") 
            obj_rented_cars = RentedCars() 
            obj_rented_cars.available_cars()
            
    
    def retrun_car(self):
        pass


class Customer(RentedCars): 
    
    obj_rented_cars = RentedCars()
    
    def __init__(self, name, phone_no):
        self.name = name
        self.phone_no = phone_no

    def car_request(self, car_requested, car_quantity, booking_starting_timestamp, booking_ending_timestamp):   
        obj_rented_cars.update_car_inventory(self.name, car_requested, car_quantity, booking_starting_timestamp, booking_ending_timestamp)

import sys
from datetime import datetime 

class CarRentingApp:
    
    def time_conversion(self, booking_date, booking_time):
        book_date = booking_date.split("-")
        book_time = booking_time.split(":")
        booking_timestamp = datetime(int(book_date[2]), int(book_date[1]), int(book_date[0]), int(book_time[0]), int(book_time[1]), 0)
        return booking_timestamp

if __name__ == "__main__":
    
    #Car Renting App object creation
    obj_car_renting_app = CarRentingApp()
  
    #Rented Car object creation
    obj_rented_cars = RentedCars()
   
    #Getting customer data for using app
    customer_name = input("Enter your name: ")
    customer_phone = input("Enter your phone number: ")
    obj_customer = Customer(customer_name, customer_phone)
    
    #Display Menu 
    print("Menu:\n Enter '1' to Show Car Availability \n Enter '2' to Show All Rental modes \n Enter '3' to Book a Car \n Enter '4' to Generate Bill")
    choice = (int(input("\nEnter your Choice: ")))
    
    #Menu option 1: Display Available Cars
    if choice == 1: 
        print("\nHere is the list of all cars available with quantity and its pricing --\n")
        obj_rented_cars.available_cars()
        
    #Menu option 2: Display Rental Mode
    if choice == 2: 
        print("\nRental Mode Available:- \n Hourly \n Daily \n Weekly")
        
    #Menu option 3: Car Booking
    if choice == 3: 
        print("\n\n!!Welcome to car renting process!!\n\nHere is the list of car available for booking -")
        #Showing available car and quantity available for booking
        obj_rented_cars.available_cars()
        input_car = input("\nEnter the car for booking:")
        if obj_rented_cars.check_car_in_inventory(input_car) != 1:
            print(f"We currently do not have this {input_car} car. Thank you for using app. \n Rerun app to select car from available list.")
            sys.exit(0)
        input_car_quantity = int(input(f"Enter number of car for the selected brand {input_car}:"))
        input_rental_mode = int(input(f"Select rental mode for car: 1) Hourly 2) Daily 3) Weekly"))
        
        #Hourly Mode
        if input_rental_mode == 1: 
            booking_booking_date = input(f"You have selected car **  {input_car} **  with Quantity **  {input_car_quantity} **  \nPlease enter the booking start date in format dd-mm-yyyy (example: 03-02-2024)")
            booking_start_time = input("Please enter the starting time in format HH:MM (example: 15:00)")
            booking_end_time = input("Please enter the ending time in format HH:MM (example: 15:00)")
            booking_starting_timestamp = obj_car_renting_app.time_conversion(booking_booking_date, booking_start_time)
            booking_ending_timestamp = obj_car_renting_app.time_conversion(booking_booking_date, booking_end_time)
            obj_customer.car_request(input_car, input_car_quantity, booking_starting_timestamp, booking_ending_timestamp)
            #obj_rented_cars.update_car_inventory(customer_name, input_car, input_car_quantity, booking_starting_timestamp, booking_ending_timestamp)
        #Daily Mode
        elif input_rental_mode == 2: 
            booking_start_date = input(f"You have selected Car ** {input_car} ** with Quantity ** {input_input_car_quantity} ** \nPlease enter the booking start date in format dd-mm-yyyy (example: 03-02-2024)")
            booking_end_date = input("Please enter the booking end date in format dd-mm-yyyy (example: 04-02-2024)")
            booking_start_time = input("Please enter the starting time in format HH:MM (example: 15:00)")
            booking_end_time = input("Please enter the ending time in format HH:MM (example: 15:00)") 
            booking_starting_timestamp = obj_car_renting_app.time_conversion(booking_booking_date, booking_start_time)
            booking_ending_timestamp = obj_car_renting_app.time_conversion(booking_end_date, booking_end_time)
            obj_rented_cars.update_car_inventory(customer_name, input_car, input_car_quantity, booking_starting_timestamp, booking_ending_timestamp)
        #Weekly Mode
        elif input_rental_mode == 3: 
            booking_start_date = input(f"You have selected car **  {input_car} **  with Quantity **  {input_car_quantity} ** \nPlease enter the booking start date in format dd-mm-yyyy (example: 03-02-2024)")
            booking_end_date = input("Please enter the booking end date in format dd-mm-yyyy (example: 04-02-2024)")
            booking_week_date = input("Enter day of the week. (Example, for Sunday and Tuesday enter '0, 2')")
            booking_start_time = input("Please enter the starting time in format HH:MM (example: 15:00)")
            booking_end_time = input("Please enter the ending time in format HH:MM (example: 15:00)") 
            booking_starting_timestamp = obj_car_renting_app.time_conversion(booking_booking_date, booking_start_time)
            booking_ending_timestamp = obj_car_renting_app.time_conversion(booking_end_date, booking_end_time)
            obj_rented_cars.update_car_inventory(customer_name, input_car, input_car_quantity, booking_starting_timestamp, booking_ending_timestamp)
        else: 
            print("Wrong choice entered")
    if choice == 4: 
        print("\n\n!!Welcome to car rental bill generation!!")
        print("Based on the details enteried. Here is your bill -")
        pass
        
    